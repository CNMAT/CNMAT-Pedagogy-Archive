**************************************************
Lab assignment part 1: Sample Playback
**************************************************

For this assignment, try to take the included objects and create a [buffer~] (sample) playback instrument.  The instrument should allow for independent speed and loop point adjustment, as well as the ability to change which sound you are playing back.  The finished patch should trigger the sample to restart to the beginning loop point, and play until the end loop point, then continue looping. 

1. First get [groove~] to output sound.  Remember that a [buffer~] object is a _container_ for data.  This data set is accessible, by name, to the entire Max environment in the same way that collections can be referred to.  Unlike [coll], [buffer~] does NOT 'do' anything aside from telling us when it is done loading that data (it issues a bang out of its right outlet).  So instead of using [buffer~] to output sound, we will use [groove~] to _access_ a [buffer~]'s data and play it back.

Open up the help file for [groove~] and look at the instructions.  Load a sound into the help file's [buffer~], turn on looping, and play a sound back.  Note the following:

    a)	audio must be on
    b)	a [buffer~] object must be associated with groove, by name.
    c)	a [buffer~] object must contain data.  Click on the read message to choose a sample from disk to fill it with (double-click on [buffer~] to see if there is a waveform there).
    d)	[groove~] must have a signal input in order to advance through time.  it will not play back without this input
    e)	[groove~] has a number of options for playback, such as sending in a float, list, or message.  Experiment with the various types of messages it takes.

2. Create a smaller version of the [groove~] help patch in your patch by taking what you've seen there and coding it into your patch.  Then,

    a)	Load a buffer, but this time use the [buffer~] object that is in your patch and use the [replace] message.  
	Make sure the audio is on, then connect a [0.] message to the left inlet of [groove~] and click it. Make sure you can get sound out of [groove~] before you move on.
    b)	Now try turning looping on.  Send a [loop 1] message to groove, then send [startloop].  
	What happens when we close the patch and reopen it?  Does it still loop?  
	Try using [loadbang], [message], [loadmess], or a combination thereof to make sure that it does.
    c)	While you can still hear the looped sample output, connect the output of a float [flonum] box to the middle inlet of [groove~], then connect the output of another float box to the right inlet.  These floats now represent the sample loop points for your playback.  Note how the window of playback shifts around as you change the numbers.  
    d)	Change the value of the blue float box connected to [sig~] and listen to how it makes the sample playback slower or faster. 

3. As an exercise in smoothing data, modify the patch so that the audio going into the left inlet of [groove~] is a [line~] object instead of a [sig~].  Connect a [$1 50] message to the line object.  The $1 message is a changeable argument, which means that any float that goes into it will change the argument and cause output. What happens if we input the number 500 into it?  Use the print object to see.  For line, the message [500 50] means to go the number "500" in 50 milliseconds.  How can we use this to smooth out our data from the Gametrak?

4. Open up the help file for [info~], load a sound file ([read] message), and click on the button to send out data.  Look at the various types of data that comes out of its outlets.  Note that when we changed the loop start/end points for [groove~], we were outputting values in milliseconds.  Since the loop start/end inlets deal with the _duration_ of a given [buffer~], we can use the output of [info~]'s duration outlet (the 2nd from right) as an input for [scale].

6. The collection [coll mysounds] contains index-to-name mappings for our samplenames.  Connect an int box to the input of [coll] in order to set which buffer is being accessed.  How can we use this output to both set the buffer being accessed AND get our information for that buffer all in one go?

7. When we set the [buffer~] being accessed for the [info~] object, we want to use the same message for [groove~]'s buffer so that we can immediately play that particular sound.  Modify the patch to make sure that [groove~]'s buffer reference gets set also (Hint: you can double-click on both the [info~] and [groove~] objects to see if they contain a waveform after setting their [buffer~]).

8. Add a multislider for the loop start, and a 2nd for loop end.  Set their range from 0-1.  Multiply the input of [info~]'s "total time" value by each of the sliders.  Keep in mind that you want the _sliders_ to do perform the calculations for output, NOT to store them.

9. Add more [buffer~]s that correspond with the [coll]'s contents, and hook a number box up to the [coll]'s inlet.

10. Hit the space bar and notice that the blue button in your patch lights up.  How can we use this to trigger the playback of our sample?  The space bar will now issue a bang.  The key object outputs special numbers based on what keys you are typing.  The key we are interested in is the space bar.  Note that we've included a conversion from the key object into a bang in your patch, so that you can use the space bar key as a new part of the instrument.  

**************************************************
Lab assignment part 2: FM Synth with envelopes
**************************************************

1.	copy the contents of your env_store_recall patch that you made and paste them into this patch (be careful to copy everything you need!)
2.	connect the bang in the key/sel/bang group of objects to the function object (keep them connected!)
3.	connect the 2nd (from left) outlet of function to a line~ object
4.	connect the line object to either scale~ or a [+~]/[*~] combo (scale the output of line~ so that it outputs a frequency range of 200-2000Hz).
5.	connect the scaled output signal into the frequency inlet of the simplefm~ abstraction
6.	read in your envelopes file that you made yesterday 
7.	look at the contents of the collection you read in by double-clicking on env_store_recall and then double-clicking on the collection it contains
8.	if you want to modify the envelopes, use the [store/recall] messages that we were using in the patch from yesterday, and add a [clear] message for the input of the [function] object
9.	provide a [setdomain $1] message for the function object so that the length of your envelope can be changed 
10.	connect a number box to the [setdomain $1] message you created
11.	repeat steps 1-3, and 6-10 in order to add additional envelopes for the 'Harmonicity Ratio' and 'Modulation Index' of the simplefm~ abstraction, and to the [*~] object connected to gain~ to modulate the amplitude.

*optional - try scaling the domain (duration) of the envelope(s) on the fly by using a Gametrak parameter
